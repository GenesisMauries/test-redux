{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/PostForm.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","className","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","catch","e","console","log","message","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","setState","defineProperty","target","name","value","preventDefault","createPost","placeholder","class","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","App","es","components_PostForm","components_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.998ba589.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n// Conecta los componentes\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\n\r\nclass Posts extends Component {\r\n  componentWillMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const postItems = this.props.posts.map(post => (\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <div key={post.id} className=\"card border-dark bg-light mb-3 text-center\" >\r\n                <div className=\"card-header\"><h5>{post.title}</h5></div>\r\n                  <div className=\"card-body\">\r\n                  <p className=\"card-text\">{post.body}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section> \r\n    ));\r\n    return (\r\n      <div>\r\n        <h3>Posts</h3>\r\n        <hr/>\r\n        {postItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .catch(e=> console.log(e.message))\r\n    .then(res => res.json())\r\n    .then(posts =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts\r\n      })\r\n    );\r\n};\r\n\r\nexport const createPost = postData => dispatch => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(postData)\r\n  })\r\n    .catch(e=> console.log(e.message))\r\n    .then(res => res.json())\r\n    .then(post =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n      })\r\n    );\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      body: ''\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    };\r\n    // Llama a la accion\r\n    this.props.createPost(post);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <form onSubmit={this.onSubmit}>\r\n              <div className=\"form-row\">\r\n                <div className=\"col-3\">\r\n                  <input \r\n                  type=\"text\" \r\n                  className=\"form-control\" \r\n                  placeholder=\"Title\"  \r\n                  name=\"title\" \r\n                  onChange={this.onChange} \r\n                  value={this.state.title}/>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <input type=\"text\" \r\n                  className=\"form-control\" \r\n                  placeholder=\"Body\"\r\n                  name=\"body\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.body}\r\n                  />\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createPost })(PostForm);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n  posts: postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\n//Provider toma el contenido del store\nimport {Provider} from 'react-redux';\nimport './App.css';\nimport Posts from './components/Posts'\nimport PostForm from './components/PostForm'\nimport store from './store'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <header>\n          <h1>Test Redux whit JSONPlaceholder API</h1>\n        </header>\n        \n        <div className=\"App\">\n          <PostForm/>\n          <hr/>\n          <Posts/>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}